function timer(id, deadline) {    

    function getTimeRemaining(endtime) {                                 //функция, определяющая разницу между deadline и нашим текущим временем, принимающий аргумент - deadline, записанный по-другому немножко
        const t = Date.parse(endtime) - Date.parse(new Date()),         //маленькая техническая константа, парсит endtime для того, чтоб с ней можно было что-то делать и далее вычитаем дату текущую, получим количество миллисекунд разницы
            days = Math.floor(t / (1000 * 60 * 60 * 24)),            //путем математических преобразований получим количество дней в t ( 1000 * 60 дает нам количество миллисекунд в минуте, * на вторые 60 даст нам количество в часе, * 24 - в сутках; разделив общее количество миллисекунд t на количество миллисекунд в сутках получим количество суток до даты endtime ), округленное с помощью Math.floor
            hours = Math.floor((t / (1000 * 60 * 60) % 24)),          //получаем часы ( делим t на количество миллисекунд в одном часе (1000 * 60 * 60), и получим общее количество часов, оставшееся до таймера, их может быть как нормальное число так и 150, 200 и 1000 часов. соответственно получим остаток от деления получившегося числа на 24, чтобы получить количество оставшихся часов без "лишних" суток ), округленные с помощью Math.floor
            minutes = Math.floor((t / 1000 / 60) % 60),               //минуты ( запись проще, так как в целом математических действий меньше, сперва получаем количество секунд поделив на 1000, далее количество минут поделив на 60 и получим остаток от деления на 60, для того тчоб отображалось количество минут не больше 60ти )
            seconds = Math.floor((t / 1000) % 60);                    //секунды. тут все просто

        return {                                                        //для возможности использования переменные снаружи функции, вернем объект
            'total': t,
            'days': days,
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds
        };
    }

    function getZero(num) {                                              //функция, добавляющая "0" к числу, если оно меньше 10. сделано для того, чтобы на странице не отображалось например "9" дней, а было "09"
        if (num >= 0 && num < 10) {
            return `0${num}`;
        }
        else {
            return num;
        }
    }

    function setClock(selector, endtime) {                              //функция, устанавливающая наш таймер на страницу, принимающая в качестве аргументов главный элемент страницы (в нашем случае это будет timer) и deadline
        const timer = document.querySelector(selector),                 //получим элементы со страницы
            days = timer.querySelector('#days'),
            hours = timer.querySelector('#hours'),
            minutes = timer.querySelector('#minutes'),
            seconds = timer.querySelector('#seconds'),
            timeInterval = setInterval(updateClock, 1000);            //запуск updateClock каждую секунду

        updateClock();                                                  //запускаем функцию для того, чтоб она при перезагрузке страницы сразу выдавала нужное текущее сзначение, а не ждала секунду (иначе будут данные, которые прописаны по умолчанию в html-странице)

        function updateClock() {                                         //функция обновляющая счетчик таймера, и записывающая результаты на страницу
            const t = getTimeRemaining(endtime);                        //расчет оставшегося времени на данную секунду, возвращает объект со всеми данными, которые мы будем использовать на странице

            days.innerHTML = getZero(t.days);                           //передаем на html-элементы нужные нам значения
            hours.innerHTML = getZero(t.hours);
            minutes.innerHTML = getZero(t.minutes);
            seconds.innerHTML = getZero(t.seconds);

            if (t.total <= 0) {                                          //останавливаем таймер, когда дата дедлайна стала больше либо равной текущей даты
                clearInterval(timeInterval);
            }
        }
    }

    setClock(id, deadline);                                       //запускаем таймер, передаем первым аргументом selector - объект страницы, а вторым аргументом дату дедлайна

}

export default timer;